# name=Behringer Danalog DDX3216 DAW

# Import necessary modules
import fl
import mixer
import midi
import device
import time
import threading
import json
import sys

# Constants specific to DDX3216
NUM_CHANNELS = 32
MIDI_CHANNEL = 0  # Adjust based on your setup
MIDI_PORT = 32  # Set the MIDI port to 32

# Function to handle incoming MIDI messages
def OnMidiMsg(event):
    if event.port == MIDI_PORT:  # Ensure we're only processing messages from the correct MIDI port
        channel = None

        # Map faders
        if midi.MIDI_CONTROLCHANGE <= event.midiId <= midi.MIDI_CONTROLCHANGE + NUM_CHANNELS:
            channel = event.data1 - 1  # Faders start from CC 1
            if 0 <= channel < NUM_CHANNELS:
                value = event.data2
                mixer.setTrackVolume(channel, value / 127.0)

        # Map pan controls
        elif 64 <= event.data1 <= 95:
            channel = event.data1 - 64  # Pan starts from CC 64
            if 0 <= channel < NUM_CHANNELS:
                value = event.data2
                mixer.setTrackPan(channel, (value - 64) / 63.0)

        # Handle Mute buttons
        elif event.midiId == midi.MIDI_NOTEON:
            if 104 <= event.data1 <= 105:  # Mute ON/OFF for channels 1-32
                mute_channel = event.data1 - 104  # Channel number from the data1 field
                if 0 <= mute_channel < NUM_CHANNELS:
                    if event.data1 == 104:
                        mixer.setTrackMute(mute_channel, True)
                    elif event.data1 == 105:
                        mixer.setTrackMute(mute_channel, False)

        # Log unhandled messages for debugging
        else:
            print(f"Unhandled MIDI message: {event.midiId}, {event.data1}, {event.data2}")

# Function to update MIDI controller when FL Studio state changes
def OnRefresh(flags):
    for i in range(NUM_CHANNELS):
        # Update fader positions
        volume = int(mixer.getTrackVolume(i) * 127)
        device.midiOutMsg(midi.MIDI_CONTROLCHANGE + MIDI_CHANNEL, 1 + i, volume)

        # Update pan positions
        pan = int((mixer.getTrackPan(i) * 63) + 64)
        device.midiOutMsg(midi.MIDI_CONTROLCHANGE + MIDI_CHANNEL, 64 + i, pan)

# Called when the script starts or when FL Studio reloads the script
def OnInit():
    OnRefresh(None)

# Called when the script is terminated or FL Studio closes
def OnDeInit():
    pass

# Additional functions for OSC communication if required
class TimeoutError(StandardError):
    pass

class BehringerDDX3216:
    def __init__(self, ddx_address, server_port, verbose, timeout=10):
        self._verbose = verbose
        self._timeout = timeout
        self._server = OSC.OSCServer(("", server_port))
        self._client = OSC.OSCClient(server=self._server)
        self._client.connect((ddx_address, 10023))
        self._input_queue = Queue.Queue()
        self._listener_thread = self.answers_to_queue_thread(self._server, queue=self._input_queue)

    def answers_to_queue_thread(self, server, queue):
        def add_to_queue(addr, tags, data, client_address):
            msg = namedtuple("ReceivedMessage", "address, tags, data, client_address")(
                address=addr, tags=tags, data=data, client_address=client_address)
            queue.put(msg)

        server.addMsgHandler("default", add_to_queue)
        thread = threading.Thread(target=server.serve_forever)
        thread.daemon = True
        thread.start()
        return thread

    def get_value(self, path):
        while True:
            try:
                self._input_queue.get_nowait()
            except Queue.Empty:
                break
        self._client.send(OSC.OSCMessage(path))
        return self._input_queue.get(timeout=self._timeout).data

    def set_value(self, path, value, readback=True):
        self._client.send(OSC.OSCMessage(path, value))
        if readback:
            start_time = time.time()
            while True:
                read_back_value = self.get_value(path)
                if len(value) == 1 and len(read_back_value) == 1:
                    if type(value[0]) is float and math.isnan(value[0]) and math.isnan(read_back_value[0]):
                        break
                if read_back_value == value:
                    break
                if time.time() - start_time > self._timeout:
                    raise TimeoutError(
                        f"Timeout while readback of path {path}, value={value}, read_back_value={read_back_value}")
                time.sleep(0.0001)

    def get_state(self):
        state = {}
        for index, path in enumerate(get_settings()):
            if self._verbose and index % 100 == 0:
                print(f"Reading parameter {index} of {len(get_settings())} from DDX3216")
            value = self.get_value(path)
            assert len(value) == 1
            state[path] = value[0]
        return state

    def set_state(self, state):
        fader_keys = sorted(key for key in state if key.endswith("fader"))
        parameters = [(key, 0.0) for key in fader_keys]
        parameters.extend((key, state[key]) for key in sorted(state.keys()) if key not in fader_keys)
        parameters.extend((key, state[key]) for key in fader_keys)

        for index, (key, value) in enumerate(parameters):
            if self._verbose and index % 100 == 0:
                print(f"Writing parameter {index} of {len(state)} to DDX3216")
            self.set_value(path=key, value=[value], readback=True)

    def save_state_to_file(self, outputfile, state):
        my_dict = {"ddx3216_state": state}
        json.dump(my_dict, outputfile, sort_keys=True, indent=4)

    def read_state_from_file(self, inputfile):
        my_dict = json.load(inputfile)
        return my_dict["ddx3216_state"]

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description="Utility to load or save the settings of a Behringer DDX3216 mixing desk.")
    parser.add_argument('--address', default="192.168.1.1", help='IP address of Behringer DDX3216 mixing desk')
    parser.add_argument('--filename', required=True, help='Filename to save/load the state')
    parser.add_argument("--to_mixer", action="store_true", help="Load settings to mixer")
    parser.add_argument("--from_mixer", action="store_true", help="Save settings from mixer")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument('--port', default=10300, help='UDP port to open on this machine.')

    args = parser.parse_args()

    mixer = BehringerDDX3216(ddx_address=args.address, server_port=args.port, verbose=args.verbose)
    mixer.ping()

    if args.to_mixer and args.from_mixer:
        print("Only one of to_mixer and from_mixer must be present at same time.")
        parser.print_help()
        sys.exit(1)
    elif args.from_mixer:
        state = mixer.get_state()
        mixer.save_state_to_file(open(args.filename, "wt"), state)
    elif args.to_mixer:
        read_back_state = mixer.read_state_from_file(inputfile=open(args.filename, "rt"))
        mixer.set_state(state=read_back_state)
    else:
        print("One of to_mixer and from_mixer must be present.")
        parser.print_help()
        sys.exit(1)
import device
import mixer
import midi

# Constants
NUM_CHANNELS = 32
MIDI_CHANNEL = 0  # Adjust based on your setup
MIDI_PORT = 32  # Set the MIDI port to 32

# Function to handle incoming MIDI messages
def OnMidiMsg(event):
    if event.port == MIDI_PORT:  # Ensure we're only processing messages from port 32
        channel = None

        # Map faders
        if midi.MIDI_CONTROLCHANGE <= event.midiId <= midi.MIDI_CONTROLCHANGE + NUM_CHANNELS:
            channel = event.data1 - 1  # Faders start from CC 1
            if 0 <= channel < NUM_CHANNELS:
                value = event.data2
                mixer.setTrackVolume(channel, value / 127.0)

        # Map pan controls
        elif 64 <= event.data1 <= 95:
            channel = event.data1 - 64  # Pan starts from CC 64
            if 0 <= channel < NUM_CHANNELS:
                value = event.data2
                mixer.setTrackPan(channel, (value - 64) / 63.0)

        # Handle Mute buttons
        elif event.midiId == midi.MIDI_NOTEON:
            if 104 <= event.data1 <= 105:  # Mute ON/OFF for channels 1-61
                mute_channel = event.data2 - 1  # Channel number from the data2 field
                if 0 <= mute_channel < NUM_CHANNELS:
                    if event.data1 == 104:
                        mixer.setTrackMute(mute_channel, True)
                    elif event.data1 == 105:
                        mixer.setTrackMute(mute_channel, False)

        # Log unhandled messages for debugging
        else:
            print(f"Unhandled MIDI message: {event.midiId}, {event.data1}, {event.data2}")

# Function to update MIDI controller when FL Studio state changes
def OnRefresh(flags):
    for i in range(NUM_CHANNELS):
        # Update fader positions
        volume = int(mixer.getTrackVolume(i) * 127)
        device.midiOutMsg(midi.MIDI_CONTROLCHANGE + MIDI_CHANNEL, 1 + i, volume)

        # Update pan positions
        pan = int((mixer.getTrackPan(i) * 63) + 64)
        device.midiOutMsg(midi.MIDI_CONTROLCHANGE + MIDI_CHANNEL, 64 + i, pan)

# Called when the script starts or when FL Studio reloads the script
def OnInit():
    OnRefresh(None)

# Called when the script is terminated or FL Studio closes
def OnDeInit():
    pass


import some_flstudio_api as fl

# Function to link channels
def link_channels(start_channel, end_channel):
    for i in range(start_channel, end_channel, 2):
        fl.link_channels(i, i+1, on=True)

# Function to configure channels
def configure_channels():
    for ch in range(1, 33):
        fl.set_channel_config(ch, {
            'name': f'Channel {ch}',
            'icon': 1,
            'color': 'OFF',
            'source': 0,
            'delay_on': False,
            'eq_on': True,
            # More configurations as needed
        })

# Function to setup default routing
def setup_routing():
    fl.set_routing('IN/1-8', 'AN1-8')
    fl.set_routing('IN/9-16', 'AN9-16')
    # More routing setups as needed

# Function to configure solo settings
def configure_solo():
    fl.set_solo_config({
        'level': 1.0,
        'source': 'LR',
        'chmode': 'PFL',
        # More solo settings as needed
    })

# Main function to setup mixer
def setup_mixer():
    link_channels(1, 32)
    configure_channels()
    setup_routing()
    configure_solo()
    # Additional configurations as needed

# Execute setup
setup_mixer()

import mido  # Make sure to install the 'mido' library for MIDI communication

# Define MIDI output (this will be your DDX3216 or MIDI interface)
midi_output = mido.open_output('DDX3216 MIDI Out')

# Define MIDI functions for transport controls
def send_midi_message(control, value):
    msg = mido.Message('control_change', control=control, value=value)
    midi_output.send(msg)

def play(is_pressed=True):
    send_midi_message(FPT_Play, 127 if is_pressed else 0)

def stop(is_pressed=True):
    send_midi_message(FPT_Stop, 127 if is_pressed else 0)

def record(is_pressed=True):
    send_midi_message(FPT_Record, 127 if is_pressed else 0)

def rewind(is_pressed=True):
    send_midi_message(FPT_Rewind, 127 if is_pressed else 0)

def fast_forward(is_pressed=True):
    send_midi_message(FPT_FastForward, 127 if is_pressed else 0)

def loop(is_pressed=True):
    send_midi_message(FPT_Loop, 127 if is_pressed else 0)

def add_marker(is_pressed=True):
    send_midi_message(FPT_AddMarker, 127 if is_pressed else 0)

def jog(offset):
    send_midi_message(FPT_Jog, offset)

def marker_jump(offset):
    send_midi_message(FPT_MarkerJumpJog, offset)

# Additional functions can be mapped similarly

# Example function to map DDX3216 channel faders to DAW mixer tracks
def map_channel_fader(channel, value):
    control = FPT_ChannelJog + channel  # This is an example; adjust based on actual MIDI mappings
    send_midi_message(control, value)

# Main function to initialize the script
def initialize_ddx3216_integration():
    # Set initial states or configurations if needed
    print("Initializing DDX3216 MIDI integration")

    # Example: Play/Stop control
    play()
    stop()

    # Example: Jog control
    jog(64)  # Center position for jog wheel

    # Example: Add a marker
    add_marker()

    # Example: Control a channel fader
    map_channel_fader(1, 100)  # Channel 1, value 100

# Execute the initialization
initialize_ddx3216_integration()            
import midi
import device
import mixer

# MIDI codes
MIDI_NOTEON = 0x90
MIDI_NOTEOFF = 0x80
MIDI_CONTROLCHANGE = 0xB0
MIDI_PITCHBEND = 0xE0

# FL Studio Mixer controls
MIXER_TRACK_COUNT = 125  # Total number of mixer tracks including master

# Mapping CC numbers to mixer controls
CC_VOLUME = 7
CC_PAN = 10
CC_MUTE = 8  # Custom CC number for mute, need to configure on your controller

def OnMidiMsg(event):
    # Check if the event is a Control Change message
    if event.status == MIDI_CONTROLCHANGE:
        track_index = event.data1 - 1  # Adjusting to 0-based index
        control_value = event.data2

        # Handle volume control
        if event.data1 in range(1, MIXER_TRACK_COUNT + 1):
            mixer.setTrackVolume(track_index, control_value / 127.0)

        # Handle pan control
        elif event.data1 in range(CC_PAN, CC_PAN + MIXER_TRACK_COUNT):
            mixer.setTrackPan(track_index, (control_value - 64) / 64.0)

        # Handle mute control
        elif event.data1 in range(CC_MUTE, CC_MUTE + MIXER_TRACK_COUNT):
            mixer.enableTrack(track_index, control_value < 64)

    # Check if the event is a Pitch Bend message
    elif event.status == MIDI_PITCHBEND:
        track_index = event.data1 - 1
        pitch_value = (event.data2 << 7) + event.data3 - 8192
        mixer.setTrackPitch(track_index, pitch_value / 8192.0)

def OnInit():
    # Initialize the controller
    device.setHasMeters()
    device.midiOutMsg(MIDI_CONTROLCHANGE + (device.FPT_Play << 8) + (127 << 16))

def OnDeInit():
    # Deinitialize the controller
    pass

def OnRefresh(flags):
    # Refresh the controller state
    if flags & PME_LiveInput:
        device.midiOutMsg(MIDI_CONTROLCHANGE + (device.FPT_Play << 8) + (127 << 16))

def OnUpdateBeatIndicator(value):
    # Update the beat indicator
    device.midiOutMsg(MIDI_NOTEON + (value << 8) + (127 << 16))

def OnProcessMIDI(event):
    # Process MIDI events
    OnMidiMsg(event)

def OnMidiIn(event):
    # Handle incoming MIDI messages
    OnProcessMIDI(event)

def OnMidiOut(event):
    # Handle outgoing MIDI messages
    device.midiOutMsg(event.status + (event.data1 << 8) + (event.data2 << 16))
